# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'task2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

import Task2.Task2 as Task2
import Lab2UI


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1224, 536)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_FR = QtWidgets.QLabel(self.centralwidget)
        self.label_FR.setGeometry(QtCore.QRect(40, 40, 222, 40))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_FR.setFont(font)
        self.label_FR.setObjectName("label_FR")
        self.label_title = QtWidgets.QLabel(self.centralwidget)
        self.label_title.setGeometry(QtCore.QRect(280, 0, 682, 32))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_title.setFont(font)
        self.label_title.setObjectName("label_title")
        self.label_p = QtWidgets.QLabel(self.centralwidget)
        self.label_p.setGeometry(QtCore.QRect(40, 200, 162, 62))
        self.label_p.setObjectName("label_p")
        self.textedit_p = QtWidgets.QLineEdit(self.centralwidget)
        self.textedit_p.setGeometry(QtCore.QRect(80, 260, 102, 40))
        self.textedit_p.setInputMethodHints(QtCore.Qt.ImhNone)
        self.textedit_p.setText("")
        self.textedit_p.setObjectName("textedit_p")
        self.label_p2 = QtWidgets.QLabel(self.centralwidget)
        self.label_p2.setGeometry(QtCore.QRect(40, 260, 42, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_p2.setFont(font)
        self.label_p2.setObjectName("label_p2")
        self.st_study_btn = QtWidgets.QPushButton(self.centralwidget)
        self.st_study_btn.setGeometry(QtCore.QRect(40, 320, 342, 42))
        self.label_n = QtWidgets.QLabel(self.centralwidget)
        self.label_n.setGeometry(QtCore.QRect(240, 200, 142, 62))
        self.label_n.setToolTip("число испытаний Бернулли с вероятностью успеха р вплоть до появления первого успеха (включая также и первый успех)")
        self.label_n.setObjectName("label_n")
        self.label_n2 = QtWidgets.QLabel(self.centralwidget)
        self.label_n2.setGeometry(QtCore.QRect(240, 260, 42, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_n2.setFont(font)
        self.label_n2.setObjectName("label_n2")
        self.Y_count = QtWidgets.QLineEdit(self.centralwidget)
        self.Y_count.setGeometry(QtCore.QRect(280, 260, 102, 40))
        self.Y_count.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Y_count.setText("")
        self.Y_count.setObjectName("Y_count")
        self.results = QtWidgets.QTextEdit(self.centralwidget)
        self.results.setGeometry(QtCore.QRect(406, 80, 802, 442))
        self.results.setObjectName("results")
        self.label_FR_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_6.setGeometry(QtCore.QRect(740, 40, 222, 32))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_FR_6.setFont(font)
        self.label_FR_6.setObjectName("label_FR_6")
        self.check_hyp_btn = QtWidgets.QPushButton(self.centralwidget)
        self.check_hyp_btn.setGeometry(QtCore.QRect(40, 480, 342, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.check_hyp_btn.setFont(font)
        self.check_hyp_btn.setObjectName("check_hyp_btn")
        self.chooseCriterion = QtWidgets.QComboBox(self.centralwidget)
        self.chooseCriterion.setEnabled(True)
        self.chooseCriterion.setGeometry(QtCore.QRect(100, 420, 222, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.chooseCriterion.setFont(font)
        self.chooseCriterion.setObjectName("chooseCriterion")
        self.chooseCriterion.addItem("")
        self.chooseCriterion.addItem("")
        self.label_criterion = QtWidgets.QLabel(self.centralwidget)
        self.label_criterion.setGeometry(QtCore.QRect(120, 380, 182, 42))
        self.label_criterion.setObjectName("label_criterion")
        self.label_FV = QtWidgets.QLabel(self.centralwidget)
        self.label_FV.setGeometry(QtCore.QRect(40, 120, 222, 42))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_FV.setFont(font)
        self.label_FV.setObjectName("label_FV")
        self.lineedit_G = QtWidgets.QLineEdit(self.centralwidget)
        self.lineedit_G.setEnabled(False)
        self.lineedit_G.setGeometry(QtCore.QRect(40, 80, 222, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.lineedit_G.setFont(font)
        self.lineedit_G.setToolTip("q = 1 - p")
        self.lineedit_G.setObjectName("lineedit_G")
        self.lineedit_g = QtWidgets.QLineEdit(self.centralwidget)
        self.lineedit_g.setEnabled(False)
        self.lineedit_g.setGeometry(QtCore.QRect(40, 160, 222, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.lineedit_g.setFont(font)
        self.lineedit_g.setToolTip("q = 1 - p")
        self.lineedit_g.setObjectName("lineedit_g")
        self.lineedit__M = QtWidgets.QLineEdit(self.centralwidget)
        self.lineedit__M.setEnabled(False)
        self.lineedit__M.setGeometry(QtCore.QRect(280, 80, 102, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.lineedit__M.setFont(font)
        self.lineedit__M.setObjectName("lineedit__M")
        self.lineedit_D = QtWidgets.QLineEdit(self.centralwidget)
        self.lineedit_D.setEnabled(False)
        self.lineedit_D.setGeometry(QtCore.QRect(280, 160, 102, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.lineedit_D.setFont(font)
        self.lineedit_D.setToolTip("q = 1 - p")
        self.lineedit_D.setObjectName("lineedit_D")
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.st_study_btn.setFont(font)
        self.st_study_btn.setObjectName("st_study_btn")
        self.label_M = QtWidgets.QLabel(self.centralwidget)
        self.label_M.setGeometry(QtCore.QRect(280, 40, 42, 40))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_M.setFont(font)
        self.label_M.setObjectName("label_M")
        self.label_D = QtWidgets.QLabel(self.centralwidget)
        self.label_D.setGeometry(QtCore.QRect(280, 120, 102, 40))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_D.setFont(font)
        self.label_D.setObjectName("label_D")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_FR.setText(_translate("MainWindow", "Функция распределения"))
        self.label_title.setText(_translate("MainWindow", "Имитация дискретных СВ (Геометрическое распределение)"))
        self.label_n.setText(_translate("MainWindow", "Кол-во эл-тов Y\n"
"      (n \u2265 1)"))
        self.label_n2.setText(_translate("MainWindow", "n ="))
        self.results.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_FR_6.setText(_translate("MainWindow", "Результаты"))
        self.check_hyp_btn.setText(_translate("MainWindow", "Проверить гипотезу"))
        self.chooseCriterion.setItemText(0, _translate("MainWindow", "Хи2 (Пирсона)"))
        self.chooseCriterion.setItemText(1, _translate("MainWindow", "Колмогорова"))
        self.label_criterion.setText(_translate("MainWindow", "Критерий проверки"))
        self.label_FV.setText(_translate("MainWindow", "Функция вероятности"))
        self.lineedit_G.setText(_translate("MainWindow", "  G(n, p) = 1 - qⁿ"))
        self.lineedit_g.setText(_translate("MainWindow", "  g(n, p) = p * qⁿ⁻¹"))
        self.lineedit__M.setText(_translate("MainWindow", " M = 1/p"))
        self.lineedit_D.setText(_translate("MainWindow", " D=q/p²"))
        self.label_p.setText(_translate("MainWindow", "Вероятность успеха\n"
"         (0 \u2264 p \u22641)"))
        self.label_p2.setText(_translate("MainWindow", "p ="))
        self.st_study_btn.setText(_translate("MainWindow", "Статист. анализ"))
        self.label_M.setText(_translate("MainWindow", "МО"))
        self.label_D.setText(_translate("MainWindow", "Дисперсия"))



    def add_functions(self):
        self.st_study_btn.clicked.connect(lambda: self.statistical_study())
        self.check_hyp_btn.clicked.connect(lambda: self.check_hypothesis())
    


    def check_hypothesis(self):
        ''' Проверка гипотезы о соотв. распределения СВ требуемому закону '''
        self.results.clear()
        criterion = self.chooseCriterion.currentIndex()

        if criterion == 0:
            criterion = 'P'
        elif criterion == 1:
            criterion = 'K'

        p = self.check_textedit_p()
        if p == -1:
            return

        Y_count = self.Y_count.text()
        try:
            Y_count = int(Y_count)
            if (criterion == 'P' and Y_count < 200) or (criterion == 'K' and Y_count < 30):
                raise ValueError
        except ValueError:
            Y_count = 0     # будет по умолчанию


        # параметры критерия
        crit_params = Task2.check_hypothesis(p, n=Y_count, kind=criterion)

        cursor = self.results.textCursor()
        cursor.insertText('                         Критерий ' + self.chooseCriterion.currentText())

        if Y_count == 0:
            if criterion == 'P':
                Y_count = 200
            elif criterion == 'K':
                Y_count = 30
        cursor.insertText('\n\nПоследовательность из {:} СВ Y.\n'.format(Y_count))

        # вывод результата проверки гипотезы о законе распределения СВ
        print_criterion_results(crit_params, self.results)

    def check_textedit_p(self):
        p = self.textedit_p.text()
        try:
            p = float(p)
            if not 0 <= p <= 1:
                raise ValueError
        except ValueError:
            self.textedit_p.setText('')
            error = QMessageBox()
            error.setWindowTitle('Неверный ввод')
            error.setText('p - число в [0, 1]')
            error.setIcon(QMessageBox.Information)
            error.exec_()
            return -1
        return p



    
    def statistical_study(self):
        ''' Статистическое исследование: гистограма, точечные и интервальные оценки '''
        self.results.clear()

        p = self.check_textedit_p()
        if p == -1:
            return
        
        Y_count = self.Y_count.text()

        try:
            Y_count = int(Y_count)
            if Y_count < 10:
                raise ValueError
        except ValueError:
            self.Y_count.setText('')
            error = QMessageBox()
            error.setWindowTitle('Неверный ввод')
            error.setText('n - целое число > 10')
            error.setIcon(QMessageBox.Information)
            error.exec_()
            return

        # параметры статистического исследования
        hist_params, pe_params, ie_params = Task2.start_st_study(p, Y_count)

        #title, A, B, v, h, F = hist_params
        
        # вывод точечных оценок
        Lab2UI.print_point_estimates(pe_params, self.results)

        # вывод интервальных оценок
        Lab2UI.print_interval_estimates(ie_params, pe_params, self.results)
        



def print_criterion_results(crit_params, textedit):
    ''' Вывод результата проверки гипотезы о законе распределения СВ '''
    cursor = textedit.textCursor()

    if crit_params[0] == 'P':
        kind, sum_pi, a, X_sq, X_tb = crit_params
        cursor.insertText("Контрольное соотношение для суммы Pi выполняется:\n")
        cursor.insertText('{:.5f} <= 0.01\n\n'.format(sum_pi))
        headers, rows = Lab2UI.print_criterion_table(a, X_sq, X_tb)
        Lab2UI.print_table_to_textedit(headers, rows, textedit)

    elif crit_params[0] == 'K':
        kind, max_d, point, a, criterion, L_tb = crit_params
        cursor.insertText("Максимальное отклонение {:.4f} в точке ({:.4f}, {:.4f})".format(
            max_d, point[0], point[1]))
        headers, rows = Lab2UI.print_criterion_table(a, criterion, L_tb)
        Lab2UI.print_table_to_textedit(headers, rows, textedit)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
