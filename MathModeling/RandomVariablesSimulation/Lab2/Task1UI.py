# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Task1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

import Task1.Task1 as Task1
import Lab2UI


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1224, 604)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.chooseGy = QtWidgets.QComboBox(self.centralwidget)
        self.chooseGy.setEnabled(True)
        self.chooseGy.setGeometry(QtCore.QRect(20, 80, 242, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.chooseGy.setFont(font)
        self.chooseGy.setObjectName("chooseGy")
        self.chooseGy.addItem("")
        self.chooseGy.addItem("")
        self.label_FR = QtWidgets.QLabel(self.centralwidget)
        self.label_FR.setGeometry(QtCore.QRect(40, 40, 222, 32))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_FR.setFont(font)
        self.label_FR.setObjectName("label_FR")
        self.label_title = QtWidgets.QLabel(self.centralwidget)
        self.label_title.setGeometry(QtCore.QRect(280, 0, 682, 32))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_title.setFont(font)
        self.label_title.setObjectName("label_title")
        self.Gy = QtWidgets.QLineEdit(self.centralwidget)
        self.Gy.setGeometry(QtCore.QRect(80, 160, 182, 40))
        self.Gy.setObjectName("Gy")
        self.label_FR_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_2.setGeometry(QtCore.QRect(100, 130, 142, 32))
        self.label_FR_2.setObjectName("label_FR_2")
        self.label_FR_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_3.setGeometry(QtCore.QRect(20, 160, 62, 32))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_FR_3.setFont(font)
        self.label_FR_3.setObjectName("label_FR_3")
        self.label_FR_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_4.setGeometry(QtCore.QRect(60, 280, 202, 32))
        self.label_FR_4.setObjectName("label_FR_4")
        self.label_FR_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_5.setGeometry(QtCore.QRect(40, 312, 42, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_FR_5.setFont(font)
        self.label_FR_5.setObjectName("label_FR_5")
        self.Y_count = QtWidgets.QLineEdit(self.centralwidget)
        self.Y_count.setGeometry(QtCore.QRect(80, 312, 182, 40))
        self.Y_count.setObjectName("Y_count")
        self.st_study_btn = QtWidgets.QPushButton(self.centralwidget)
        self.st_study_btn.setGeometry(QtCore.QRect(20, 380, 242, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.st_study_btn.setFont(font)
        self.st_study_btn.setObjectName("st_study_btn")
        self.results = QtWidgets.QTextEdit(self.centralwidget)
        self.results.setGeometry(QtCore.QRect(286, 80, 922, 502))
        self.results.setObjectName("results")
        self.label_FR_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_6.setGeometry(QtCore.QRect(740, 40, 222, 32))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_FR_6.setFont(font)
        self.label_FR_6.setObjectName("label_FR_6")
        self.check_hyp_btn = QtWidgets.QPushButton(self.centralwidget)
        self.check_hyp_btn.setGeometry(QtCore.QRect(20, 540, 242, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.check_hyp_btn.setFont(font)
        self.check_hyp_btn.setObjectName("check_hyp_btn")
        self.save_func_btn = QtWidgets.QPushButton(self.centralwidget)
        self.save_func_btn.setGeometry(QtCore.QRect(20, 220, 242, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.save_func_btn.setFont(font)
        self.save_func_btn.setObjectName("save_func_btn")
        self.chooseCriterion = QtWidgets.QComboBox(self.centralwidget)
        self.chooseCriterion.setEnabled(True)
        self.chooseCriterion.setGeometry(QtCore.QRect(20, 482, 242, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.chooseCriterion.setFont(font)
        self.chooseCriterion.setObjectName("chooseCriterion")
        self.chooseCriterion.addItem("")
        self.chooseCriterion.addItem("")
        self.chooseCriterion.addItem("")
        self.label_FR_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_7.setGeometry(QtCore.QRect(60, 440, 182, 42))
        self.label_FR_7.setObjectName("label_FR_7")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.chooseGy.setItemText(0, _translate("MainWindow", "G(y) = y^2"))
        self.chooseGy.setItemText(1, _translate("MainWindow", "G(y) = 1 - e ** (-4*y)"))
        self.label_FR.setText(_translate("MainWindow", "Функция распределения"))
        self.label_title.setText(_translate("MainWindow", "Имитация непрерывных СВ (Метод обратных функций)"))
        self.label_FR_2.setText(_translate("MainWindow", "Свой вариант"))
        self.label_FR_3.setText(_translate("MainWindow", "G(y)="))
        self.label_FR_4.setText(_translate("MainWindow", "Кол-во элементовтов Y"))
        self.label_FR_5.setText(_translate("MainWindow", "n ="))
        self.st_study_btn.setText(_translate("MainWindow", "Статист. анализ"))
        self.results.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_FR_6.setText(_translate("MainWindow", "Результаты"))
        self.check_hyp_btn.setText(_translate("MainWindow", "Проверить гипотезу"))
        self.save_func_btn.setText(_translate("MainWindow", "Сохранить"))
        self.chooseCriterion.setItemText(0, _translate("MainWindow", "Хи2 (Пирсона)"))
        self.chooseCriterion.setItemText(1, _translate("MainWindow", "Колмогорова"))
        self.chooseCriterion.setItemText(2, _translate("MainWindow", "Мизеса"))
        self.label_FR_7.setText(_translate("MainWindow", "Критерий проверки"))

    def add_functions(self):
        self.save_func_btn.clicked.connect(lambda: self.save_func())
        self.st_study_btn.clicked.connect(lambda: self.statistical_study())
        self.check_hyp_btn.clicked.connect(lambda: self.check_hypothesis())
    


    def check_hypothesis(self):
        ''' Проверка гипотезы о соотв. распределения СВ требуемому закону '''
        self.results.clear()
        criterion = self.chooseCriterion.currentIndex()

        if criterion == 0:
            criterion = 'P'
        elif criterion == 1:
            criterion = 'K'
        elif criterion == 2:
            criterion = 'M'

        G_str = self.chooseGy.currentText()
        G = Task1.create_func(G_str.replace('G(y) = ', ''))

        Y_count = self.Y_count.text()
        try:
            Y_count = int(Y_count)
            if (criterion == 'P' 
                and Y_count < 200) or (criterion == 'K' and Y_count < 30) or (criterion == 'M' and Y_count < 50):
                raise ValueError
        except ValueError:
            Y_count = 0     # будет по умолчанию


        # параметры критерия
        crit_params = Task1.check_hypothesis(G, G_str, kind=criterion, n=Y_count)

        cursor = self.results.textCursor()
        cursor.insertText('                         Критерий ' + self.chooseCriterion.currentText())

        if Y_count == 0:
            if criterion == 'P':
                Y_count = 200
            elif criterion == 'K':
                Y_count = 30
            elif criterion == 'M':
                Y_count = 50
        cursor.insertText('\n\nПоследовательность из {:} СВ Y.\n'.format(Y_count))

        # вывод результата проверки гипотезы о законе распределения СВ
        print_criterion_results(crit_params, self.results)

    
    def statistical_study(self):
        ''' Статистическое исследование: гистограма, точечные и интервальные оценки '''
        self.results.clear()
        G_str = self.chooseGy.currentText()
        G = Task1.create_func(G_str.replace('G(y) = ', ''))

        Y_count = self.Y_count.text()

        try:
            Y_count = int(Y_count)
            if Y_count < 10:
                raise ValueError
        except ValueError:
            self.Y_count.setText('')
            error = QMessageBox()
            error.setWindowTitle('Неверный ввод')
            error.setText('n - целое число > 10')
            error.setIcon(QMessageBox.Information)
            error.exec_()
            return

        # параметры статистического исследования
        hist_params, pe_params, ie_params = Task1.start_st_study(G, G_str, Y_count)

        #eq_interval, equiprobable = hist_params
        #title, A, B, v, h, F = eq_interval
        #title, A2, B2, v2, h2, F2 = equiprobable
        
        # вывод точечных оценок
        Lab2UI.print_point_estimates(pe_params, self.results)

        # вывод интервальных оценок
        Lab2UI.print_interval_estimates(ie_params, pe_params, self.results)



    def save_func(self):
        G_str = self.Gy.text()

        G = Task1.create_func(G_str)
        if G == 'error':
            self.Gy.setText('')
            error = QMessageBox()
            error.setWindowTitle('Неверный ввод')
            error.setText('Неверный ввод G(y)\nТолько английский, переменная только "y"')
            error.setIcon(QMessageBox.Information)
            error.exec_()
            return

        G_str = 'G(y) = '+ G_str

        if self.chooseGy.findText(G_str) == -1:
            self.Gy.setText('')
            self.chooseGy.addItem(G_str)
            last = self.chooseGy.count()
            self.chooseGy.setCurrentIndex(last-1)
        else:
            self.Gy.setText('')
            error = QMessageBox()
            error.setWindowTitle('Ошибка')
            error.setText('Такая функция уже есть')
            error.setIcon(QMessageBox.Information)
            error.exec_()


def print_criterion_results(crit_params, textedit):
    ''' Вывод результата проверки гипотезы о законе распределения СВ '''
    cursor = textedit.textCursor()

    if crit_params[0] == 'P':
        kind, sum_pi, a, X_sq, X_tb = crit_params
        cursor.insertText("Контрольное соотношение для суммы Pi выполняется:\n")
        cursor.insertText('{:.5f} <= 0.01\n\n'.format(sum_pi))
        headers, rows = Lab2UI.print_criterion_table(a, X_sq, X_tb)
        Lab2UI.print_table_to_textedit(headers, rows, textedit)

    elif crit_params[0] == 'K':
        kind, max_d, point, a, criterion, L_tb = crit_params
        cursor.insertText("Максимальное отклонение {:.4f} в точке ({:.4f}, {:.4f})".format(
            max_d, point[0], point[1]))
        headers, rows = Lab2UI.print_criterion_table(a, criterion, L_tb)
        Lab2UI.print_table_to_textedit(headers, rows, textedit)

    elif crit_params[0] == 'M':
        kind, a, criterion, L_tb = crit_params
        headers, rows = Lab2UI.print_criterion_table(a, criterion, L_tb)
        Lab2UI.print_table_to_textedit(headers, rows, textedit)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())



