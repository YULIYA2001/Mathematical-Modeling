# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'lab4.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import Lab4


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1224, 604)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_title = QtWidgets.QLabel(self.centralwidget)
        self.label_title.setGeometry(QtCore.QRect(240, 20, 782, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_title.setFont(font)
        self.label_title.setObjectName("label_title")
        self.label_task = QtWidgets.QLabel(self.centralwidget)
        self.label_task.setGeometry(QtCore.QRect(40, 50, 1142, 222))
        self.label_task.setObjectName("label_task")
        self.label_alltime2 = QtWidgets.QLabel(self.centralwidget)
        self.label_alltime2.setGeometry(QtCore.QRect(255, 320, 42, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_alltime2.setFont(font)
        self.label_alltime2.setObjectName("label_alltime2")
        self.Tn_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.Tn_edit.setGeometry(QtCore.QRect(300, 320, 162, 40))
        self.Tn_edit.setObjectName("Tn_edit")
        self.plot_graphic_btn = QtWidgets.QPushButton(self.centralwidget)
        self.plot_graphic_btn.setGeometry(QtCore.QRect(140, 540, 222, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.plot_graphic_btn.setFont(font)
        self.plot_graphic_btn.setObjectName("plot_graphic_btn")
        self.results = QtWidgets.QTextEdit(self.centralwidget)
        self.results.setGeometry(QtCore.QRect(486, 200, 722, 382))
        self.results.setObjectName("results")
        self.label_FR_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_6.setGeometry(QtCore.QRect(840, 160, 222, 32))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_FR_6.setFont(font)
        self.label_FR_6.setObjectName("label_FR_6")
        self.start_btn = QtWidgets.QPushButton(self.centralwidget)
        self.start_btn.setGeometry(QtCore.QRect(140, 380, 222, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.start_btn.setFont(font)
        self.start_btn.setObjectName("start_btn")
        self.chooseGraphic = QtWidgets.QComboBox(self.centralwidget)
        self.chooseGraphic.setEnabled(True)
        self.chooseGraphic.setGeometry(QtCore.QRect(60, 480, 402, 42))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.chooseGraphic.setFont(font)
        self.chooseGraphic.setObjectName("chooseGraphic")
        self.chooseGraphic.addItem("")
        self.chooseGraphic.addItem("")
        self.label_graphics = QtWidgets.QLabel(self.centralwidget)
        self.label_graphics.setGeometry(QtCore.QRect(160, 440, 182, 42))
        self.label_graphics.setObjectName("label_graphics")
        self.label_alltime = QtWidgets.QLabel(self.centralwidget)
        self.label_alltime.setGeometry(QtCore.QRect(280, 280, 202, 42))
        self.label_alltime.setObjectName("label_alltime")
        self.dt_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.dt_edit.setGeometry(QtCore.QRect(60, 320, 162, 40))
        self.dt_edit.setObjectName("dt_edit")
        self.label_step = QtWidgets.QLabel(self.centralwidget)
        self.label_step.setGeometry(QtCore.QRect(40, 280, 202, 42))
        self.label_step.setObjectName("label_step")
        self.label_step2 = QtWidgets.QLabel(self.centralwidget)
        self.label_step2.setGeometry(QtCore.QRect(15, 320, 42, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_step2.setFont(font)
        self.label_step2.setObjectName("label_step2")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_title.setText(_translate("MainWindow", "Система массового обслуживания с неограниченной очередью"))
        self.label_task.setText(_translate("MainWindow", "3. Железнодорожная сортировочная горка, на которую подается простейший поток составов с интенсивностью λ = 2 состава в час, \n"
"представляет собой одноканальную СМО с неограниченной очередью. Время обслуживания (роспуска) состава на горке имеет \n"
"показательное распределение со средним значением tобсл = 20 мин. Найти: \n"
"- финальные вероятности состояний СМО, \n"
"- среднее число z составов, связанных с горкой, \n"
"- среднее число составов в очереди, \n"
"- среднее время tсмо пребывания состава в СМО, \n"
"- среднее время tq пребывания состава в очереди."))
        self.label_alltime2.setText(_translate("MainWindow", "Тn ="))
        self.plot_graphic_btn.setText(_translate("MainWindow", "Построить график"))
        self.results.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_FR_6.setText(_translate("MainWindow", "Результаты"))
        self.start_btn.setText(_translate("MainWindow", "Решить задачу"))
        self.chooseGraphic.setItemText(0, _translate("MainWindow", "От общего времени наблюдения"))
        self.chooseGraphic.setItemText(1, _translate("MainWindow", "От шага наблюдения"))
        self.label_graphics.setText(_translate("MainWindow", "Графики зависимости"))
        self.label_alltime.setText(_translate("MainWindow", "Время наблюдения (ч)"))
        self.label_step.setText(_translate("MainWindow", "Шаг наблюдения (ч)"))
        self.label_step2.setText(_translate("MainWindow", "Δt ="))


    def add_functions(self):
        self.start_btn.clicked.connect(lambda: self.start())
        self.plot_graphic_btn.clicked.connect(lambda: self.plot_graphic())


    def start(self):
        ''' Моделирование процесса в СМО, оценка характеристик '''
        self.results.clear()
        dt = self.dt_edit.text()
        Tn = self.Tn_edit.text()

        try:
            dt = float(dt)
        except ValueError:
            self.dt_edit.setText('')
            error = QMessageBox()
            error.setWindowTitle('Неверный ввод')
            error.setText('dt - число')
            error.setIcon(QMessageBox.Information)
            error.exec_()
            return

        try:
            Tn = float(Tn)
        except ValueError:
            self.Tn_edit.setText('')
            error = QMessageBox()
            error.setWindowTitle('Неверный ввод')
            error.setText('Tn - число')
            error.setIcon(QMessageBox.Information)
            error.exec_()
            return

        params = Lab4.task3_about_trains(dt, Tn)

        Lab4.plot_final_p(params[5], params[0], Tn, dt)

        print_results(params, self.results)
        


    def plot_graphic(self):
        ''' Построение графика при различных dt или Tn '''
        self.results.clear()
        graphic_type = self.chooseGraphic.currentIndex()
        
        if graphic_type == 0:
            Tn_ = [10, 100, 1000, 10000]
            dt = 0.1
            final_p_params = []
            for i in range(len(Tn_)):
                params = Lab4.task3_about_trains(dt=dt, Tn=Tn_[i])
                final_p_params.append( (params[5], params[0]) )
            Lab4.plot_diff_dt(final_p_params, Tn_, dt, ['Tn = {:}ч', 'Теор. dt = {:}ч'])
        elif graphic_type == 1:
            dt_ = [10, 1, 0.1, 0.01]
            Tn = 1000
            final_p_params = []
            for i in range(len(dt_)):
                params = Lab4.task3_about_trains(dt=dt_[i], Tn=Tn)
                final_p_params.append( (params[5], params[0]) )
            Lab4.plot_diff_dt(final_p_params, dt_, Tn, ['dt = {:}ч', 'Теор. Тн = {:}ч'])
            

def print_table_to_textedit(headers, rows, textedit):
    cursor = textedit.textCursor()
    cursor.insertTable(len(rows) + 1, len(headers))
    for header in headers:
        cursor.insertText(header)
        cursor.movePosition(QtGui.QTextCursor.NextCell)
    for row in rows:
        for value in row:
            cursor.insertText(str(value))
            cursor.movePosition(QtGui.QTextCursor.NextCell)


def print_results(params, textedit):
    '''         Вывод результатов
        params - что выводить, textedit - куда  '''
    f_p, T_CMO, T_Q, L_CMO, L_Q, f_p_t, T_CMO_t, T_Q_t, L_CMO_t, L_Q_t = params
    
    # финальные вероятности
    headers = ["", "    Теоретическое зн.   ", " Эмпирическое зн. ", "        \u0394"]
    rows = []
    for i in range(len(f_p)):
        rows.append(["    p[{:}]     ".format(i), '      %.6f'%f_p_t[i], '      %.6f'%f_p[i], '  %.6f  '%( abs(f_p_t[i]-f_p[i]) )])

    cursor = textedit.textCursor()
    cursor.insertText("                           Финальные вероятности\n")
    print_table_to_textedit(headers, rows, textedit)

    # остальные хар-ки
    headers = ["", "    Теоретическое зн.   ", " Эмпирическое зн. ", "        \u0394"]
    rows = [['    L_смо     ', '      %.6f'%L_CMO_t, '      %.6f'%L_CMO, '  %.6f  '%( abs(L_CMO_t-L_CMO) )]]
    cursor = textedit.textCursor()
    cursor.insertText("\n\n         Среднее число составов, связанных с горкой (в СМО)\n")
    print_table_to_textedit(headers, rows, textedit)

    headers = ["", "    Теоретическое зн.   ", " Эмпирическое зн. ", "        \u0394"]
    rows = [['    L_оч     ', '      %.6f'%L_Q_t, '      %.6f'%L_Q, '  %.6f  '%( abs(L_Q_t-L_Q) )]]
    cursor = textedit.textCursor()
    cursor.insertText("\n\n                           Среднее число составов в очереди\n")
    print_table_to_textedit(headers, rows, textedit)

    headers = ["", "    Теоретическое зн.   ", " Эмпирическое зн. ", "        \u0394"]
    rows = [['    T_смо     ', '      %.6f'%T_CMO_t, '      %.6f'%T_CMO, '  %.6f  '%( abs(T_CMO_t-T_CMO) )]]
    cursor = textedit.textCursor()
    cursor.insertText("\n\n                      Среднее время пребывания состава в СМО\n")
    print_table_to_textedit(headers, rows, textedit)

    headers = ["", "    Теоретическое зн.   ", " Эмпирическое зн. ", "        \u0394"]
    rows = [['    T_оч     ', '      %.6f'%T_Q_t, '      %.6f'%T_Q, '  %.6f  '%( abs(T_Q_t-T_Q) )]]
    cursor = textedit.textCursor()
    cursor.insertText("\n\n                  Среднее время пребывания состава в очереди\n")
    print_table_to_textedit(headers, rows, textedit)    



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
