# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Task1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

#import Task1.Task1 as Task1
import CommonUI
from ConsoleMains.NSVmain import * 
import Generator.FormNSV as Form2NSV
import StatisticalStudy.NSV.StStudy as StStudyNSV
import StatisticalStudy.HypothesisTesting as HT


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1224, 604)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_FR = QtWidgets.QLabel(self.centralwidget)
        self.label_FR.setGeometry(QtCore.QRect(60, 40, 222, 32))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_FR.setFont(font)
        self.label_FR.setObjectName("label_FR")
        self.label_title = QtWidgets.QLabel(self.centralwidget)
        self.label_title.setGeometry(QtCore.QRect(350, 0, 682, 32))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_title.setFont(font)
        self.label_title.setObjectName("label_title")
        self.label_FR_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_3.setGeometry(QtCore.QRect(20, 60, 250, 80))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_FR_3.setFont(font)
        self.label_FR_3.setObjectName("label_FR_3")
        self.label_FR_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_4.setGeometry(QtCore.QRect(50, 135, 202, 32))
        self.label_FR_4.setObjectName("label_FR_4")
        self.label_FR_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_5.setGeometry(QtCore.QRect(40, 175, 42, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_FR_5.setFont(font)
        self.label_FR_5.setObjectName("label_FR_5")
        self.Y_count = QtWidgets.QLineEdit(self.centralwidget)
        self.Y_count.setGeometry(QtCore.QRect(80, 175, 182, 40))
        self.Y_count.setObjectName("Y_count")
        self.generate_btn = QtWidgets.QPushButton(self.centralwidget)
        self.generate_btn.setGeometry(QtCore.QRect(20, 250, 242, 60))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.generate_btn.setFont(font)
        self.generate_btn.setObjectName("generate_btn")
        self.indep_cond_denc_btn = QtWidgets.QPushButton(self.centralwidget)
        self.indep_cond_denc_btn.setGeometry(QtCore.QRect(20, 330, 242, 60))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.indep_cond_denc_btn.setFont(font)
        self.indep_cond_denc_btn.setObjectName("indep_cond_denc_btn")
        self.histograms_btn = QtWidgets.QPushButton(self.centralwidget)
        self.histograms_btn.setGeometry(QtCore.QRect(20, 410, 242, 60))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.histograms_btn.setFont(font)
        self.histograms_btn.setObjectName("histograms_btn")
        self.estimates_btn = QtWidgets.QPushButton(self.centralwidget)
        self.estimates_btn.setGeometry(QtCore.QRect(20, 490, 242, 60))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.estimates_btn.setFont(font)
        self.estimates_btn.setObjectName("estimates_btn")
        self.results = QtWidgets.QTextEdit(self.centralwidget)
        self.results.setGeometry(QtCore.QRect(286, 80, 922, 502))
        self.results.setObjectName("results")
        self.label_FR_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_FR_6.setGeometry(QtCore.QRect(740, 40, 222, 32))
        font = QtGui.QFont()
        font.setBold(True)
        self.label_FR_6.setFont(font)
        self.label_FR_6.setObjectName("label_FR_6")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_FR.setText(_translate("MainWindow", "Функция плотности"))
        self.label_title.setText(_translate("MainWindow", "Имитация системы непрерывных СВ X и Y"))
        self.label_FR_3.setText(_translate("MainWindow", "f(x,y)=1/2*(sin(x+y))\n          0≤x,y≤π/2"))
        self.label_FR_4.setText(_translate("MainWindow", "Кол-во элементовтов X(Y)"))
        self.label_FR_5.setText(_translate("MainWindow", "n ="))
        self.generate_btn.setText(_translate("MainWindow", "Сгенерировать СВ"))
        self.histograms_btn.setText(_translate("MainWindow", "Гистограммы Х, Y"))
        self.estimates_btn.setText(_translate("MainWindow", "Характеристики\n (M, D, R)"))
        self.indep_cond_denc_btn.setText(_translate("MainWindow", "Независимость X, Y\nУсловные плотности"))
        self.results.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_FR_6.setText(_translate("MainWindow", "Результаты"))

    def add_functions(self):
        self.generate_btn.clicked.connect(lambda: self.generate_SV())
        self.indep_cond_denc_btn.clicked.connect(lambda: self.st_study_indep_cond_denc())
        self.histograms_btn.clicked.connect(lambda: self.st_study_histograms())
        self.estimates_btn.clicked.connect(lambda: self.st_study_estimates())

    glob_x, glob_y = [], []


    def generate_SV(self):
        ''' Генерация СВ '''
        self.results.clear()
        count = self.Y_count.text()

        try:
            count = int(count)
            if count < 10:
                raise ValueError
        except ValueError:
            self.Y_count.setText('')
            error = QMessageBox()
            error.setWindowTitle('Неверный ввод')
            error.setText('n - целое число > 10')
            error.setIcon(QMessageBox.Information)
            error.exec_()
            return

        #  формированиe двумерной НСВ
        self.glob_x, self.glob_y = Form2NSV.form_values(f1x, f2yx, f1x_max, f2yx_max, ax, bx, ay, by, count=count)



    def st_study_indep_cond_denc(self):
        ''' Статистическое исследование. Проверка СВ Х и У на независимость. Условные плотности распределения '''
        if self.glob_x == [] or self.glob_y == []:
            error = QMessageBox()
            error.setWindowTitle('Предупреждение')
            error.setText('Точки не сгенерированны.\nНажмите "Сгенерировать"')
            error.setIcon(QMessageBox.Information)
            error.exec_()
            return

        self.results.clear()

        # проверка на независимость
        if StStudyNSV.is_independent(f, f1x, f1y, ax, bx, ay, by):
            self.results.append('НСВ X и Y независимые: f(x,y) = f(x)*f(y)')
        else:
            self.results.append('НСВ X и Y зависимые: f(x,y) ≠ f(x)*f(y)')
            
        # условные плотности распределения
        str_res = StStudyNSV.conditional_dencity_functions(f2xy, f2yx, f1x, f1y, ax, bx, ay, by)
        self.results.append('\nУсловные плотности распределения:\nf(x|y) = {:} \nf(y|x) = {:}'
                            .format(str_res[0], str_res[1]))



    def st_study_histograms(self):
        ''' Статистическое исследование. Гистограммы составляющих НСВ - СВ Х и У 2D и 3D '''
        if self.glob_x == [] or self.glob_y == []:
            error = QMessageBox()
            error.setWindowTitle('Предупреждение')
            error.setText('Точки не сгенерированны.\nНажмите "Сгенерировать"')
            error.setIcon(QMessageBox.Information)
            error.exec_()
            return

        self.results.clear()

        # гистограммы составляющих двумерной НСВ и графики их плотностей распределения в одной сист. координат
        StStudyNSV.plot_histograms_and_graphs(self.glob_x, self.glob_y, f1x, f2yx, ax, bx, ay, by)

        # гистограммa распределения двумерной НСВ и 3D-график плотности распределения в одной сист. координат 
        StStudyNSV.plot_histograms_and_graphs_3D(self.glob_x, self.glob_y, ax, bx, ay, by, f_min, f_max)



    def st_study_estimates(self):
        ''' Статистическое исследование. Теоретические, точечные и интервальные значения МО, дисперсии, корреляции '''
        if self.glob_x == [] or self.glob_y == []:
            error = QMessageBox()
            error.setWindowTitle('Предупреждение')
            error.setText('Точки не сгенерированны.\nНажмите "Сгенерировать"')
            error.setIcon(QMessageBox.Information)
            error.exec_()
            return

        self.results.clear()

         # теоретические, точечные и интервальные значения характеристик ДНСВ (МО, дисперсия, корреляция)
        Mx, Dx, My, Dy, Rxy = StStudyNSV.point_estimates(self.glob_x, self.glob_y)

        pe_params = Mx, Dx, Mx_t(), Dx_t(), My, Dy, My_t(), Dy_t(), Rxy, Rxy_t()
        CommonUI.print_point_estimates(pe_params, self.results)

        ie_params_x, ie_params_y, ie_params_r = StStudyNSV.interval_estimates(
            self.glob_x, self.glob_y, Mx, Mx_t(), Dx, Dx_t(), My, My_t(), Dy, Dy_t(), Rxy, Rxy_t())

        CommonUI.print_interval_estimates(ie_params_x, pe_params[0:4], self.results, sv_name='X')
        CommonUI.print_interval_estimates(ie_params_y, pe_params[4:8], self.results, sv_name='Y')
        CommonUI.print_interval_estimates_R(ie_params_r, pe_params[8:], self.results)

        # проверка гипотез. Проверка гипотезы о равенстве статистических средних значений и дисперсий
        n = len(self.glob_x)
        x_params_M, y_params_M, x_params_D, y_params_D = HT.test(
            Mx, Mx_t(), My, My_t(), Dx, Dx_t(), Dy, Dy_t(), Rxy, Rxy_t(), n)

        cursor = self.results.textCursor()
        cursor.insertText("\n\n         Проверка гипотезы о соответствии полученных M и D теоретическим\n")
        cursor.insertText("Проверка МО для СВ Х")
        print_criterion_results(x_params_M, self.results)
        cursor.insertText("\nПроверка МО для СВ Y")
        print_criterion_results(y_params_M, self.results)
        cursor.insertText("\nПроверка дисперсии для СВ Х")
        print_criterion_results(x_params_D, self.results)
        cursor.insertText("\nПроверка дисперсии для СВ Y")
        print_criterion_results(y_params_D, self.results)


def print_criterion_results(crit_params, textedit):
    ''' Вывод результата проверки гипотезы о  соответствии  полученных  M и D теоретическим '''
    cursor = textedit.textCursor()

    a, X, X_tb = crit_params
    headers, rows = CommonUI.print_criterion_table(a, X, X_tb)
    CommonUI.print_table_to_textedit(headers, rows, textedit)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())



